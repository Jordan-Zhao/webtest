<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc     
        http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
       "
	default-autowire="byName">

	<bean id="userService" class="com.zjd.demos.webtest.service.UserServiceImpl" />

	<!-- 申明HSF接口 -->
	<bean class="com.taobao.hsf.app.spring.util.HSFSpringProviderBean">
		<!-- serviceInterface必须配置[String]，为服务对外提供的接口 -->
		<property name="serviceInterface">
			<value>com.zjd.demos.webtest.service.UserService</value>
		</property>
		<!-- target必须配置[ref]，为需要发布为HSF服务的spring bean id -->
		<property name="target">
			<ref bean="userService" />
		</property>
		<!-- serviceVersion为可选配置[String]，含义为服务的版本，默认为1.0.0 -->
		<property name="serviceVersion">
			<value>1.1.0</value>
			<!-- 不要有空白字符/回车换行 -->
		</property>
		<!-- serviceName为推荐配置[String]，含义为服务的名称，便于管理，默认为null -->
		<property name="serviceName">
			<value>hsf_test_service</value>
		</property>
		<!-- serviceDesc为可选配置[String]，含义为服务的描述信息，便于管理，默认为null -->
		<property name="serviceDesc">
			<value>user service providered by HSF</value>
		</property>
		<!-- serviceGroup为可选配置[String]，含义为服务所属的组别，相当于此机器所在的VIP，默认为HSF -->
		<property name="serviceGroup">
			<value>HSF</value>
		</property>
		<!-- supportAsynCall为可选配置[true|false]，含义为标识此服务是否支持持久可靠的异步调用 -->
		<!-- 默认值为false，也就是不支持持久可靠的异步调用，但仍然支持非持久可靠的oneway、future以及callback方式的异步调用 -->
		<property name="supportAsynCall">
			<value>false</value>
		</property>
		<!-- clientTimeout为可选配置[int]，含义为客户端调用此服务时的超时时间，单位为ms，默认为3000ms -->
		<property name="clientTimeout">
			<value>3000</value>
		</property>
		<!-- clientIdleTimeout为可选配置[int]，含义为客户端连接空闲的超时时间，单位为s，默认为600 -->
		<property name="clientIdleTimeout">
			<value>60</value>
		</property>
		<!-- serializeType为可选配置[String(hessian|java)]，含义为序列化类型，默认为hessian -->
		<property name="serializeType">
			<value>java</value>
		</property>
		<!-- methodToInjectConsumerIp为可选配置，含义为注入调用端IP的方法，这样业务服务也可以得知是哪个IP在调用，该方法的参数必须为String -->
		<property name="methodToInjectConsumerIp">
			<value>setConsumerIP</value>
		</property>
		<!-- methodSpecials为可选配置，含义为为方法单独配置超时时间，这样接口中的方法可以采用不同的超时时间 -->
		<property name="methodSpecials">
			<list>
				<bean class="com.taobao.hsf.model.metadata.MethodSpecial">
					<property name="methodName" value="sum" />
					<property name="clientTimeout" value="10000" />
				</bean>
			</list>
		</property>
	</bean>

	<!-- 调用客户端 -->
	<bean id="userServiceHsfClient" class="com.taobao.hsf.app.spring.util.HSFSpringConsumerBean">
		<!-- interfaceName必须配置[String]，为需要调用的服务的接口 -->
		<property name="interfaceName">
			<value>com.zjd.demos.webtest.service.UserService</value>
		</property>
		<!-- version为可选配置[String]，含义为需要调用的服务的版本，默认为1.0.0 -->
		<property name="version">
			<value>1.1.0</value>
		</property>
		<!-- group为可选配置[String]，含义为需要调用的服务所在的组，默认为HSF -->
		<property name="group">
			<value>HSF</value>
		</property>
		<!-- methodSpecials为可选配置，含义为为方法单独配置超时时间，这样接口中的方法可以采用不同的超时时间 -->
		<property name="methodSpecials">
			<list>
				<bean class="com.taobao.hsf.model.metadata.MethodSpecial">
					<property name="methodName" value="getUserName" />
					<property name="clientTimeout" value="10000" />
				</bean>
			</list>
		</property>
		<!-- target为可选配置[String]，含义为需调用的服务的地址和端口 -->
		<!-- 主要用于单元测试环境和-Dhsf.run.mode=0的开发环境中，在运行环境下，此属性将无效，而是采用配置中心推送回来的目标服务地址信息 -->
		<property name="target">
			<value>10.1.19.213:12200?_TIMEOUT=1000</value>
		</property>
		<!-- asyncallMethods为可选配置[List]，含义为调用此服务时需要采用异步调用的方法名列表以及异步调用的方式 默认为空集合，即所有方法都采用同步调用 -->
<!-- 		<property name="asyncallMethods"> -->
<!-- 			<list> -->
<!-- 				<value>name:getUserName</value> -->
<!-- 			</list> -->
<!-- 		</property> -->
		<!-- public void webtest Maven Webapp_callback(Object invokeContext, Object appResponse, Throwable t)，其中webtest Maven Webapp即为发起调用的远程服务的方法名 -->
<!-- 		<property name="callbackHandler" ref="PlugServiceCallbackHandler" /> -->
		<!-- 设置传递上下文的方式为接口方式，即在发起调用时先调用接口上的setInvokeContext方法传入上下文对象 -->
<!-- 		<property name="interfaceMethodToAttachContext" value="setInvokeContext" /> -->
		<!-- 设置传递上下文的方式为ThreadLocal对象方式，即在发起调用时通过一个ThreadLocal对象来设置上下文对象，接口方式和ThreadLocal对象方式选其一即可 -->
<!-- 		<property name="invokeContextThreadLocal" ref="invokeContextThreadLocal" /> -->
	</bean>
</beans>